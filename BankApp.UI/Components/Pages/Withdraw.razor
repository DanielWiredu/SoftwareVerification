@page "/withdraw"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<h3>Withdraw Funds</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Text">@SuccessMessage</MudAlert>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Text">@ErrorMessage</MudAlert>
}

<EditForm Model="withdrawRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <MudTextField @bind-Value="withdrawRequest.AccountNumber" Label="Account Number:" Variant="Variant.Outlined"></MudTextField>
    </div>

    <div class="mb-3">
        <MudTextField @bind-Value="withdrawRequest.Amount" Format="F2" Label="Amount:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Warning" />
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Warning" @onclick=HandleWithdraw>Withdraw</MudButton>
</EditForm>

@code {
    private WithdrawRequest withdrawRequest = new();
    private string SuccessMessage;
    private string ErrorMessage;

    public class WithdrawRequest
    {
        [Required]
        public string AccountNumber { get; set; }

        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than 0.")]
        public decimal Amount { get; set; }
    }

    private async Task HandleWithdraw()
    {
        SuccessMessage = string.Empty;
        ErrorMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("/api/accounts/withdraw", withdrawRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<WithdrawResponse>();
                // SuccessMessage = $"Successfully withdrew {result.Amount:C} from account {result.AccountNumber}.";
                SuccessMessage = $"{result.Message}";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    public class WithdrawResponse
    {
        // public string AccountNumber { get; set; }
        public string Message { get; set; }
        public decimal NewBalance { get; set; } 
    }
}
