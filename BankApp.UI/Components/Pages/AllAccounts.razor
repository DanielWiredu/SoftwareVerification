@page "/allaccounts"
@inject HttpClient Http

@* <h1 class="text-2xl font-bold mb-4">All Accounts</h1>

@if (accounts == null)
{
    <p>Loading...</p>
}
else if (!accounts.Any())
{
    <p>No accounts found.</p>
}
else
{
    <table class="table-auto w-full border">
        <thead>
            <tr class="bg-gray-200">
                <th class="px-4 py-2 border">Account Number</th>
                <th class="px-4 py-2 border">Name</th>
                <th class="px-4 py-2 border">Balance</th>
                <th class="px-4 py-2 border">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in accounts)
            {
                <tr>
                    <td class="px-4 py-2 border">@account.AccountNumber</td>
                    <td class="px-4 py-2 border">@account.Name</td>
                    <td class="px-4 py-2 border">@account.Balance.ToString("C")</td>
                    <td class="px-4 py-2 border">@(account.IsClosed ? "Closed" : "Active")</td>
                </tr>
            }
        </tbody>
    </table>
} *@

<PageTitle>All Accounts</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">All Accounts</MudText>

@if (accounts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="accounts" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false">
        <HeaderContent>
            <MudTh>Account Number</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Balance</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Account Number">@context.AccountNumber</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Balance">@context.Balance</MudTd>
            <MudTd DataLabel="Status">@(context.IsClosed ? "Closed" : "Active")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<AccountDto>? accounts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            accounts = await Http.GetFromJsonAsync<List<AccountDto>>("/api/accounts/getall");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load accounts: {ex.Message}");
            accounts = new(); // Prevents null issues in rendering
        }
    }

    public class AccountDto
    {
        public int Id { get; set; }
        public string AccountNumber { get; set; } = "";
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public double Balance { get; set; } = 0;
        public bool IsClosed { get; set; } = false;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}
