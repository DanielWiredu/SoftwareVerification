@page "/deposit"
@inject HttpClient Http

<h3 class="text-xl font-semibold mb-4">Deposit Funds</h3>

<EditForm Model="request" OnValidSubmit="Deposit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-4">
        <MudTextField @bind-Value="request.AccountNumber" Label="Account Number:" Variant="Variant.Outlined"></MudTextField>
    </div>

    <div class="mb-4">
        <MudTextField @bind-Value="request.Amount" Format="F2" Label="Amount:" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Warning" />
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick=Deposit>Deposit</MudButton>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    @if (IsSuccess)
    {
        <MudAlert Severity="Severity.Success" Variant="Variant.Text">@Message</MudAlert>
    }
    else
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Text">@Message</MudAlert>
    }
}

@code {
    private DepositRequest request = new();
    private string Message;
    private bool IsSuccess;

    private async Task Deposit()
    {
        Message = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("/api/accounts/deposit", request);

            if (response.IsSuccessStatusCode)
            {
                Message = "Deposit successful.";
                IsSuccess = true;
                request = new(); // reset form
            }
            else
            {
                Message = await response.Content.ReadAsStringAsync();
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
            IsSuccess = false;
        }
    }

    public class DepositRequest
    {
        public string AccountNumber { get; set; }
        public decimal Amount { get; set; }
    }
}
